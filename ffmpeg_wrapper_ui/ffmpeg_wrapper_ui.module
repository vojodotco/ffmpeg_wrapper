<?php

// $Id$

/**
 * @file
 * Provides a user interface to FFmpeg Wrapper
 */


/* ************************************************ */
/* DRUPAL HOOKS                                     */
/* ************************************************ */

/**
 * Implementation of hook_menu().
 */
function ffmpeg_wrapper_ui_menu() {
  $items = array();
  // hand back the specific configurations for a codec
  $items['ffmpeg_wrapper/output'] = array(
    'title' => 'FFmpeg Wrapper',
    'page callback' => 'ffmpeg_wrapper_ui_output_display',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // Allow users to transcode if they can edit the node
  $items['node/%node/ffmpeg/%'] = array (
    'title' => 'Test Convert File',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ffmpeg_wrapper_ui_node_convert_form', 1, 3),
    'access callback' => 'ffmpeg_wrapper_ui_access',
    'access arguments' => array(1, 3),
    'type' => MENU_CALLBACK,
  );
  // Provides the transcoding via AHAH
  $items['ffmpeg_wrapper/js'] = array (
    'title' => 'Test Convert File',
    'page callback' => 'ffmpeg_wrapper_ui_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // Provides the transcoding for node edit pages via AHAH
  $items['node/%node/ffmpeg/%/data'] = array (
    'title' => 'Get Metadata from file',
    'page callback' => 'ffmpeg_wrapper_ui_file_data',
    'page arguments' => array(1 ,3),
    'access callback' => 'ffmpeg_wrapper_ui_access',
    'access arguments' => array(1, 3),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Implementation of hook_theme().
 * @return array
 */
function ffmpeg_wrapper_ui_theme() {
  return array(
    'ffmpeg_wrapper_ui_files_radios' => array(
      'arguments' => array('form' => NULL),
      'file' => 'ffmpeg_wrapper_ui.theme.inc'
    ),
    'ffmpeg_wrapper_ui_file_data' => array(
      'arguments' => array('filepath' => NULL),
      'file' => 'ffmpeg_wrapper_ui.theme.inc'
    )
  );
}


/**
 * add a link to do conversion testing on the standard file display
 * checks to make sure the file is usable by ffmpeg
 *
 * @param string $form_id
 * @param array $form
 */
function ffmpeg_wrapper_ui_form_alter(&$form, $form_state, $form_id) {
  // if user does not have rights to test with ffmpeg
  if (! user_access('administer ffmpeg wrapper')) {
    return;
  }

  // Are there attached files?
  if (isset($form['attachments']) && $files = $form['attachments']['wrapper']['files']) {
    foreach ($files as $fid => $file) {
      // check to make sure this is a file array and if this file is decodeable by ffmpeg
      // we are dealing with a form element, so we have to make sure that this is the part that we want
      if (is_array($file)) {
        // can ffmpeg decode this?
        if (ffmpeg_wrapper_can_decode($file['filepath']['#value'])) {
          $nid = $form['#node']->nid;
          // create the link for test conversion
          $link = '<br />'. l(t('Test convert file with FFmpeg'), "node/$nid/ffmpeg/$fid", array(
            'attributes' => array(
              'class' => 'ffmpeg_convert',
              'nid' => $nid,
              'fid' => $fid,
              'filepath' => $file['filepath']['#value'],
             )));
          // Alter the description of this item to include the link
          $form['attachments']['wrapper']['files'][$fid]['description']['#description'] .= $link;
          // Keep track of the clicked file options
          $options[$file['filepath']['#value']] = $file['filepath']['#value'];
        }
      }
    }
    // If there are files that can be transcoded, add a container that we can
    // insert ajax data into
    if ($link) {
      drupal_add_js(drupal_get_path('module', 'ffmpeg_wrapper_ui') .'/ffmpeg_wrapper_ui.js');
      drupal_add_css(drupal_get_path('module', 'ffmpeg_wrapper_ui') .'/ffmpeg_wrapper_ui.css');
      $form += array('ffmpeg_wrapper' => ffmpeg_wrapper_ui_node_convert_form($form_state, $form['#node']));
      $form['ffmpeg_wrapper']['#type'] = 'markup';
      $form['ffmpeg_wrapper']['#value'] = '';
      $form['ffmpeg_wrapper']['#prefix'] = '<div id="ffmpeg_convert">';
      $form['ffmpeg_wrapper']['#suffix'] = '</div><div id="ffmpeg_convert_background"></div>';
      // Create a select element where we can track the choosen file
      $form['ffmpeg_wrapper']['source'] = array(
        '#type' => 'select',
        '#title' => t('Transcoding File Choice'),
        '#options' => $options,
        '#prefix' => '<div style="display: none;">',
        '#suffix' => '</div>',
      );
    }
  }
}


/**
 * Implementation of hook_perm().
 */
function ffmpeg_wrapper_ui_perm() {
  return array('transcode file');
}


/* ************************************************** */
/* Internal Functiosn                                 */
/* ************************************************** */

/**
 * Custom access function which checks to see
 * if the user has to edit and transcode this file
 * @param $node
 *   object, drupal node
 * @return boolean
 */
function ffmpeg_wrapper_ui_access($node, $fid) {
  // Does the user have rights to transcode this?
  if (! user_access('transcode file')) {
    return false;
  }
  // Does the user have rights to edit this node?
  if (! node_access('update', $node)) {
    return false;
  }
  // Is this file attached to this node?
  if (! $node->files[$fid]) {
    return false;
  }

  return true;
}

/* ************************************************** */
/* Configuration forms                                */
/* ************************************************** */


/**
 * All a user to transcode a file attached to a node
 * @param $node
 * @param $fid
 * @return unknown_type
 */
function ffmpeg_wrapper_ui_node_convert_form($form_state, $node) {
  $form = array();
  // Wrapper for the output of the transcoding process (used by ahah.js).
  $form['title'] = array(
    '#type' => 'markup',
    '#value' => '<h3>' . t('Transcode File') .'</h3>',
  );

  $form['source_data'] = array(
    '#type' => 'fieldset',
    '#title' => t('Source File Details'),
    '#collapsed' => false,
    '#collapsible' => true,
    '#attributes' => array('id' => 'source_details'),
  );

  // Wrapper for the output of the transcoding process (used by ahah.js).
  $form['wrapper'] = array(
    '#type' => 'markup',
    '#value' => '<div id="transcode-wrapper"></div>',
  );

  $form['converted'] = array(
    '#prefix' => '<div style="display:none;">',
    '#suffix' => '</div>',
  );

  // display the conversion output
  $form['converted']['data'] = array(
    '#type' => 'fieldset',
    '#title' => t('Conversion data'),
  );

  // Display the transcoding status
  $form['converted']['data']['display'] = array(
    '#type' => 'markup',
    '#value' => '',
    '#suffix' => '<br />',
  );

  // Attach this file back to the node
  $form['converted']['data']['attach'] = array(
    '#value' => t('Attach'),
    '#type' => 'submit',
    '#submit' => array('ffmpeg_wrapper_ui_attach_file'),
  );

   // Download this file
  $form['converted']['data']['download'] = array(
    '#value' => t('Download'),
    '#type' => 'submit',
    '#submit' => array('ffmpeg_wrapper_ui_download_file'),
  );

  $form['converted']['data']['ffmpeg_output'] = array(
    '#type' => 'fieldset',
    '#title' => t('FFmpeg Output'),
    '#collapsible' => true,
    '#collapsed' => true,
  );
  $form['converted']['data']['ffmpeg_output']['command'] = array(
    '#type' => 'markup',
    '#value' => '',
    '#suffix' => '<br />',
  );
  $form['converted']['data']['ffmpeg_output']['output'] = array(
    '#type' => 'markup',
    '#value' => '',
  );

  // Get the FFmpeg configuration form
  $form['convert'] = ffmpeg_wrapper_ui_configuration_form();
  // Change the title of the ffmpeg form
  $form['convert']['ffmpeg_wrapper']['#title'] = t('Transcode file using these settings');

  // Add the submit button inside the fieldset
  $form['convert']['ffmpeg_wrapper']['submit'] = array(
    '#type' => 'button',
    '#value' => t('Transcode'),
    '#name' => 'transcode',
    '#ahah' => array(
      'path' => 'ffmpeg_wrapper/js',
      'wrapper' => 'transcode-wrapper',
      'event' => 'click',
      'progress' => array('type' => 'bar', 'message' => t('Transcoding, please wait...')),
    ),
  );

  return $form;
}


/**
 * Build a generic form for any module to implementm ffmpeg configuration.
 * This will give any module the ajax form configuration updates.
 * Validation and submission need to be handled by the calling module - this
 * only builds the form call this form inside your form function.
 *
 * @param $configuration
 *   An array of configuration data - could be $form_values.
 * @param $prefix
 *   A prefix for the form elelements, needed for javascript activation on
 *   complex forms (eg: media mover).
 * @return array
 *   A Drupal form array.
 */
function ffmpeg_wrapper_ui_configuration_form($configuration = array(), $form_prefix = '' ) {
  // enable the javascript configuration options on the output type to use AJAX
  // to update the allowed values
  ffmpeg_wrapper_ui_enable_js($form_prefix, 'ffmpeg_output_type');
  drupal_add_css(drupal_get_path('module', 'ffmpeg_wrapper') .'/ffmpeg_wrapper.css');

  $form['ffmpeg_wrapper'] = array(
    '#type' => 'fieldset',
    '#title' => t('FFmpeg video conversion settings'),
    '#collapsed' => false,
  );

  // build the output formats
  $form['ffmpeg_wrapper']['ffmpeg_output_type'] = array(
    '#type' => 'select',
    '#title' => t('Output format'),
    '#options' => ffmpeg_wrapper_output_formats(),
    '#default_value' => $configuration['ffmpeg_output_type'],
    '#description' => t('Select the output format. Note, some formats may require setting audio or video codecs.'),
  );

  // ---------------------------------------------
  // Audio options
  $form['ffmpeg_wrapper']['audio'] = array(
    '#type' => 'fieldset',
    '#title' => t('Audio conversion settings'),
    '#collapsed' => $configuration['ffmpeg_audio_advanced'] ? false : true,
    '#collapsible' => true,
  );
  $form['ffmpeg_wrapper']['audio']['ffmpeg_audio_advanced'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use advanced settings'),
    '#description' => t('Use the advanced audio encoding options. If this is off, FFmpeg will encode at a rate similar to the source material.'),
    '#default_value' => $configuration['ffmpeg_audio_advanced'],
  );
  $form['ffmpeg_wrapper']['audio']["ffmpeg_audio_ab"] = array(
    '#type' => 'select',
    '#title' => t('Audio bit rate'),
    '#options' => ffmpeg_wrapper_output_rates('ab'),
    '#default_value' => $configuration['ffmpeg_audio_ab'] ? $configuration['ffmpeg_audio_ab'] :  array('64k'),
    '#description' => t("Audio bit rate for conversion file."),
  );
  $form['ffmpeg_wrapper']['audio']["ffmpeg_audio_ar"] = array(
    '#type' => 'select',
    '#title' => t('Audio sample rate'),
    '#options' => ffmpeg_wrapper_output_rates('ar'),
    '#default_value' => $configuration['ffmpeg_audio_ar'] ? $configuration['ffmpeg_audio_ar'] : 44100,
    '#description' => t('Audio sample rate for conversion.'),
  );
  // set the audio codec in use
  $form['ffmpeg_wrapper']['audio']['ffmpeg_audio_acodec'] = array(
    '#type' => 'select',
    '#title' => t('Audio codec'),
    '#options' => ffmpeg_wrapper_return_codecs('audio'),
    '#default_value' => $configuration['ffmpeg_audio_acodec'] ? $configuration['ffmpeg_audio_acodec'] : 0 ,
    '#description' => t('Select the codec for the output format. Please note, you may need to pick an appropriate video codec for the transcoding. WARNING the codec support right now is experimental. Things may not work as expected.'),
  );

  // -------------------------------------------
  // Video options
  $form['ffmpeg_wrapper']['video'] = array(
    '#type' => 'fieldset',
    '#title' => t('Video conversion settings'),
    '#collapsed' => $configuration['ffmpeg_video_advanced'] ? false : true,
    '#collapsible' => true,
  );
  $form['ffmpeg_wrapper']['video']['ffmpeg_video_advanced'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use advanced settings'),
    '#description' => t('Use the advanced video encoding options. If this is off, FFmpeg will encode flv at 200 kb/s, 128x96, 25fps.'),
    '#default_value' => $configuration['ffmpeg_video_advanced'],
  );
  // video frame size
  $frame_size = ffmpeg_wrapper_frame_sizes();
  $form['ffmpeg_wrapper']['video']['ffmpeg_video_size'] = array(
    '#type' => 'select',
    '#title' => t('Video frame size'),
    '#options' => $frame_size,
    '#default_value' => $configuration['ffmpeg_video_size'],
    '#description' => t('Dimensions of the converted video. Use the <em>Other</em> option to define your custom size.'),
    '#prefix' => '<div class="ffmpeg-video-size">',
    '#suffix' => '</div>',
    '#validate' => array('mm_ffmpeg_config_video_size_validate' => array('ffmpeg_video_size')),
  );
  $form['ffmpeg_wrapper']['video']['ffmpeg_video_size_other'] = array(
    '#type' => 'textfield',
    '#title' => t('Video frame (Other) size'),
    '#default_value' => $configuration['ffmpeg_video_size_other'],
    '#description' => t('Dimensions of the converted video, of the format 600x400.'),
    '#prefix' => '<div class="ffmpeg-video-size-other">',
    '#suffix' => '</div>',
    '#validate' => array('mm_ffmpeg_config_video_size_validate' => array('ffmpeg_video_size_other')),
    '#size' => 12,
  );
  $form['ffmpeg_wrapper']['video']['ffmpeg_video_fps'] = array(
    '#type' => 'select',
    '#title' => t('Video fps rate'),
    '#options' => ffmpeg_wrapper_output_rates('fps'),
    '#default_value' => $configuration['ffmpeg_video_fps'] ? $configuration['ffmpeg_video_fps'] : array(25),
    '#description' => t("Sets the frames per second of the converted video."),
  );
  $form['ffmpeg_wrapper']['video']['ffmpeg_video_br'] = array(
    '#type' => 'select',
    '#title' => t('Video bit rate'),
    '#options' => ffmpeg_wrapper_output_rates('br'),
    '#default_value' => $configuration['ffmpeg_video_br'] ? $configuration['ffmpeg_video_br'] : array('250k'),
    '#description' => t('Target the output video to this bit rate.'),
  );
  $form['ffmpeg_wrapper']['video']['ffmpeg_video_vcodec'] = array(
    '#type' => 'select',
    '#title' => t('Video codec'),
    '#options' => ffmpeg_wrapper_return_codecs('video'),
    '#default_value' => $configuration['ffmpeg_video_vcodec'] ? $configuration['ffmpeg_video_vcodec'] : 0,
    '#description' => t('Select the codec for the output format. Please note, you may need to pick an appropriate audio codec for the transcoding.'),
  );

  $form['ffmpeg_wrapper']['time'] = array(
    '#type' => 'fieldset',
    '#title' => t('Video duration'),
    '#collapsed' => $configuration['ffmpeg_time_advanced'] ? false : true,
    '#collapsible' => true,
  );
  $form['ffmpeg_wrapper']['time']['ffmpeg_time_advanced'] = array(
    '#type' => 'checkbox',
    '#title' => t('Truncate the output video'),
    '#description' => t('Use this to limit the length of the output video. Useful for making a video teaser'),
    '#default_value' => $configuration['ffmpeg_time_advanced'],
  );
  $times = array(30 => "30 seconds", 60 => "1 minute", 120 => "2 minutes", 300 => "5 minutes");
  $form['ffmpeg_wrapper']['time']["ffmpeg_time"] = array(
    '#type' => 'select',
    '#title' => t('Video length'),
    '#options' => $times,
    '#default_value' => $configuration['ffmpeg_time'],
    '#description' => t("Set the max video length time."),
  );

  // FFmpeg custom command
  $form['ffmpeg_wrapper']['custom'] = array(
    '#type' => 'fieldset',
    '#title' => t('Custom FFmpeg command'),
    '#collapsed' => $configuration['ffmpeg_video_custom'] ? false : true,
    '#collapsible' => true,
  );
  $form['ffmpeg_wrapper']['custom']["ffmpeg_video_custom"] = array(
    '#type' => 'checkbox',
    '#title' => t('Use custom FFmpeg command'),
    '#description' => t('Use the custom FFmpeg command in the textfield below.'),
    '#default_value' => $configuration['ffmpeg_video_custom'],
  );
  $form['ffmpeg_wrapper']['custom']["ffmpeg_video_custom_command"] = array(
    '#type' => 'textarea',
    '#rows' => 1,
    '#title' => t('Custom FFmpeg command'),
    '#description' => t('You can craft your own FFmpeg command. Please see the FFmpeg documentation for correct syntax. The command will replace <em>%in_file</em> and <em>%out_file</em> with the generated files. Please note, you can not use | or > in your commands.'),
    '#default_value' => $configuration['ffmpeg_video_custom_command'] ? $configuration['ffmpeg_video_custom_command'] : '-i %in_file %out_file',
  );

  // Watermarking options
  // only display if we have access to the watermarking files
  if (ffmpeg_wrapper_path_to_vhook('watermark.so')) {
    $form['ffmpeg_wrapper']['watermark'] = array(
      '#type' => 'fieldset',
      '#title' => t('Video watermark settings'),
      '#collapsed' => $configuration['ffmpeg_video_wm'] ? false : true,
      '#collapsible' => true,
    );
    $form['ffmpeg_wrapper']['watermark']['ffmpeg_video_wm'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use watermark'),
      '#description' => t('Use a file to watermark the converted video.'),
      '#default_value' => $configuration['ffmpeg_video_wm'],
    );
    // @ TODO make this a file upload
    $form['ffmpeg_wrapper']['watermark']['ffmpeg_video_wm_file'] = array(
      '#type' => 'textfield',
      '#title' => t('Path to file'),
      '#description' => t('Absolute path to the watermark file.'),
      '#default_value' => $configuration['ffmpeg_video_wm_file'],
    );
  }
  // file chmod settings, maybe legacy.....
  $form['ffmpeg_wrapper']['file'] = array(
    '#type' => 'fieldset',
    '#title' => t('File settings'),
    '#collapsed' => true,
    '#collapsible' => true,
  );
  $form['ffmpeg_wrapper']['file']["ffmpeg_output_perms"] = array(
    '#type' => 'textfield',
    '#title' => t('Output file permissions'),
    '#description' => t('Set the permissions on the output file. Default is 0644.'),
    '#default_value' => $configuration['ffmpeg_output_perms'] ? $configuration['ffmpeg_output_perms'] : '0644' ,
    '#size' => 4,
  );
  return $form;
}


/**
 * Provides the transcoding services via JS. This is cribbed
 * from upload.module
 * @return unknown_type
 */
function ffmpeg_wrapper_ui_js() {
  // We're starting in step #3, preparing for #4.
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  // Step #4.
  $form = form_get_cache($form_build_id, $form_state);

  // Preparing for #5.
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#programmed'] = $form['#redirect'] = FALSE;

  // Step #5.
  drupal_process_form($form_id, $form, $form_state);

  // Fid is sent via the source select
  $fid = $form_state['values']['source'];
  // Move the file path to create the correct data structure
  $filepath = $form_state['values']['files'][$fid]['filepath'];


  // Perform the conversion while we still have the form data
  $ffmpeg_object = ffmpeg_wrapper_convert_file($form_state['values']);

  $form_state['storage']['ffmpeg_object'] = $ffmpeg_object;
  // Step #6 and #7 and #8.
 // $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);

  // This displays the transcoded form after it has been populated
  unset($form['ffmpeg_wrapper']['converted']['#prefix'], $form['ffmpeg_wrapper']['converted']['#suffix']);

  // Get the portion of the form we will populate.
  $converted = $form['ffmpeg_wrapper']['converted'];

  // Display the the file data
  if ($ffmpeg_object->errors) {
    $title = '<h3>' . t('There were errors during the conversion!!') . '</h3>';
    $display = $title . t('Errors found: !errors', array(
      '!errors' => implode('<br />', $ffmpeg_object->errors)
    ));
  }
  else {
    $title = '<h3>' . t('Your file was successfully transcoded!') . '</h3>';
    $display =  $title . t('Output file is: !file', array(
      '!file' => basename($ffmpeg_object->output_file)
    ));
  }
  // Assign the output to the display field
  $converted['data']['display']['#value'] = $display;

  // Return the command
  $converted['data']['ffmpeg_output']['#description'] =  t('Command run was: !command', array(
    '!command' => $ffmpeg_object->command)
  );
  // FFmpeg output
  $converted['data']['ffmpeg_output']['output']['#value'] = '<pre>'. $ffmpeg_object->output .'</pre>';

  // This populates the transcoded form with data
  $output = theme('status_messages') . drupal_render($converted);
  print drupal_to_js(array('status' => TRUE, 'data' => $output));
  exit();
}




/**
 * This allows for file downloads from the temp directory.
 * Only users with access to this node will be able to
 * download this file. This is a potential security risk as
 * it it could allow the user to fetch any file inside of
 * the temp directory. The incoming $filename is
 * @param $node
 *   object, drupal node object
 * @param $filename
 *   string, name of the file to transfer
 * @return unknown_type
 */
function ffmpeg_wrapper_ui_download_file($form, $form_state) {
  // Get the file path from the form
  $filepath = $form_state['storage']['ffmpeg_object']->output_file;
  // Make sure that we are looking for a file in the correct place-
  // attempt to prevent exploits
  if (! file_exists($filepath)) {
    exit();
  }
  $headers[] = 'Content-Type: ' . file_get_mimetype($filepath);
  $headers[] = 'Content-Description: File Transfer';
  $headers[] = 'Content-Disposition: attachment; filename="' . basename($filepath) . '";';
  $headers[] = 'Content-Transfer-Encoding: binary';
  file_transfer($filepath, $headers);
  exit();
}


/**
 * This allows for file downloads from the temp directory.
 * Only users with access to this node will be able to
 * download this file. This is a potential security risk as
 * it it could allow the user to fetch any file inside of
 * the temp directory. The incoming $filename is
 * @param $node
 *   object, drupal node object
 * @param $filename
 *   string, name of the file to transfer
 * @return unknown_type
 */
function ffmpeg_wrapper_ui_attach_file($form, $form_state) {
  // Get the file path from the form
  $filepath = $form_state['storage']['ffmpeg_object']->output_file;

  // Make sure the file exists
  if (! file_exists($filepath)) {
    drupal_set_message(t('Transcoded file does not exists.', 'error'));
    return;
  }

  // Copy the file to the files directory
  file_copy($filepath);
  // load the node object
  $node = node_load($form_state['values']['nid']);
  // build the file object
  $file = new stdClass();
  $file->new = true;
  $file->fid = 'new';
  $file->uid = $node->uid;
  $file->filename = basename($filepath);
  $file->filepath = file_create_filename(basename($filepath), file_directory_path());
  $file->filemime = file_get_mimetype($filepath);
  $file->filesize = filesize($filepath);
  $file->timestamp = time();
  $file->list = variable_get('upload_list_default', 1);
  $file->status = 1;
  // save the file
  drupal_write_record('files', $file);
  // add the file to the node object
  $node->files[$file->fid] = $file;
  // save the modified node
  node_save($node);
  // alert the user
  drupal_set_message(t('Attached your transcoded file'));
  drupal_goto('node/'. $node->nid .'/edit');
}


/**
 * Helper function to display an ajax version of this form
 * @param $node
 *   object, drupal node object
 * @param $fid
 *   int, drupal file id
 * @return unknown_type
 */
function ffmpeg_wrapper_node_convert_ajax($node, $fid) {
  $form = drupal_get_form('ffmpeg_wrapper_node_convert_ajax_form', $node, $fid);
  print ($form);
  exit;
}

function ffmpeg_wrapper_node_convert_ajax_form($form_state, $node, $fid) {
  return ffmpeg_wrapper_ui_node_convert_form($form_state, $node, $fid);
}


/**
 * Provides metadata for a specified $fid
 * @param $node
 * @param $fid
 * @return string
 */
function ffmpeg_wrapper_ui_file_data($node, $fid) {
 // Get the filepath for this file
  if (! $filepath = db_result(db_query('SELECT filepath FROM {files} WHERE fid = %d', $fid))) {
    drupal_set_message(t('Requested file was not found'));
    drupal_not_found();
  }
  print(theme('ffmpeg_wrapper_ui_file_data', $filepath));
  exit();
}


/**
 * Load the js. This is a wrapper function just so other modules can use this.
 *
 * @param $prefix
 *   The standard prefix to the elements that will be modified.
 * @param $bind_element
 *   The name of the element (minus the prefix) that will be modifed.
 */
function ffmpeg_wrapper_ui_enable_js($prefix = '', $bind_element = '') {
  // because of the way drupal handles form element ids, we have to transform
  // underscores in string to dashes
  $bind_element = str_replace('_', '-', $bind_element);
  $prefix = str_replace('_', '-', $prefix);

  drupal_add_js('
    $(document).ready(function () {
      $(\'#'. $prefix . $bind_element .'\').bind("change", function () {ffmpeg_wrapper_update_options("'. $prefix .'", "'. $bind_element .'"); });
    });',
    'inline');
  drupal_add_js(array('ffmpeg_wrapper' => array(
    'ffmpeg_wrapper_output_url' => url('ffmpeg_wrapper/output/'),
    'default_string' => t('default'),
   )), 'setting');
  drupal_add_js(drupal_get_path('module', 'ffmpeg_wrapper_ui') .'/ffmpeg_wrapper_ui.js');
}